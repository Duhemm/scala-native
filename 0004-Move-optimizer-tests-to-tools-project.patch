From 0f2956754c79ec0994e8eecd36277e2234fdfae0 Mon Sep 17 00:00:00 2001
From: Martin Duhem <martin.duhem@gmail.com>
Date: Fri, 11 Nov 2016 15:47:28 +0100
Subject: [PATCH 04/13] Move optimizer tests to `tools` project.

---
 .travis.yml                                          |  2 +-
 build.sbt                                            | 13 ++-----------
 .../{testing => }/compiler/NIRCompiler.scala         |  0
 .../scala/scalanative/FilteredClassLoader.scala      |  0
 .../test/scala/scala/scalanative/FrameworkTest.scala |  4 +---
 .../test/scala/scala/scalanative/NIRCompiler.scala   | 20 +++++++++-----------
 .../scala/scala/scalanative/NIRCompilerTest.scala    | 12 +++++-------
 .../test/scala/scala/scalanative/NativeSpec.scala    |  4 ++--
 8 files changed, 20 insertions(+), 35 deletions(-)
 rename testing-compiler/src/main/scala/scalanative/{testing => }/compiler/NIRCompiler.scala (100%)
 rename {testing-optimizer/src/main => tools/src/test}/scala/scala/scalanative/FilteredClassLoader.scala (100%)
 rename {testing-optimizer => tools}/src/test/scala/scala/scalanative/FrameworkTest.scala (87%)
 rename testing-optimizer/src/main/scala/scala/scalanative/Compiler.scala => tools/src/test/scala/scala/scalanative/NIRCompiler.scala (86%)
 rename testing-optimizer/src/test/scala/scala/scalanative/CompilerTest.scala => tools/src/test/scala/scala/scalanative/NIRCompilerTest.scala (77%)
 rename testing-optimizer/src/test/scala/scala/scalanative/OptimizerSpec.scala => tools/src/test/scala/scala/scalanative/NativeSpec.scala (89%)

diff --git a/.travis.yml b/.travis.yml
index 93fb3db..6354daf 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -54,4 +54,4 @@ script:
   - pushd sbt-cross
   - sbt publishLocal
   - popd
-  - bin/scalafmt --test && sbt 'cleanCache' 'cleanLocal' 'nscplugin/publishLocal' 'nativelib/publishLocal' 'publishLocal' 'sandbox/run' 'demoNative/run' 'tests/run' 'tools/test' 'testingOptimizer/test' 'benchmarks/run' 'scripted' 'publishSnapshot'
+  - bin/scalafmt --test && sbt 'cleanCache' 'cleanLocal' 'nscplugin/publishLocal' 'nativelib/publishLocal' 'publishLocal' 'sandbox/run' 'demoNative/run' 'tests/run' 'tools/test' 'benchmarks/run' 'scripted' 'publishSnapshot'
diff --git a/build.sbt b/build.sbt
index ff2b0f9..c546ff2 100644
--- a/build.sbt
+++ b/build.sbt
@@ -158,12 +158,13 @@ lazy val tools =
           "org.scalamacros" % "paradise" % "2.0.1" cross CrossVersion.full),
         "org.scalatest" %% "scalatest" % "3.0.0" % "test"
       ),
+      fullClasspath in Test := ((fullClasspath in Test) dependsOn setUpTestingCompiler).value,
       publishLocal := publishLocal
         .dependsOn(publishLocal in nir)
         .dependsOn(publishLocal in util)
         .value
     )
-    .dependsOn(nir, util)
+    .dependsOn(nir, util, testingCompilerInterface % Test)
 
 lazy val nscplugin =
   project
@@ -383,16 +384,6 @@ lazy val benchmarks =
     )
     .enablePlugins(ScalaNativePlugin)
 
-lazy val testingOptimizer =
-  project
-    .in(file("testing-optimizer"))
-    .settings(toolSettings)
-    .settings(
-      fullClasspath in Test := ((fullClasspath in Test) dependsOn setUpTestingCompiler).value,
-      libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.0" % Test
-    )
-    .dependsOn(testingCompilerInterface, tools)
-
 lazy val testingCompilerInterface =
   project
     .in(file("testing-compiler-interface"))
diff --git a/testing-compiler/src/main/scala/scalanative/testing/compiler/NIRCompiler.scala b/testing-compiler/src/main/scala/scalanative/compiler/NIRCompiler.scala
similarity index 100%
rename from testing-compiler/src/main/scala/scalanative/testing/compiler/NIRCompiler.scala
rename to testing-compiler/src/main/scala/scalanative/compiler/NIRCompiler.scala
diff --git a/testing-optimizer/src/main/scala/scala/scalanative/FilteredClassLoader.scala b/tools/src/test/scala/scala/scalanative/FilteredClassLoader.scala
similarity index 100%
rename from testing-optimizer/src/main/scala/scala/scalanative/FilteredClassLoader.scala
rename to tools/src/test/scala/scala/scalanative/FilteredClassLoader.scala
diff --git a/testing-optimizer/src/test/scala/scala/scalanative/FrameworkTest.scala b/tools/src/test/scala/scala/scalanative/FrameworkTest.scala
similarity index 87%
rename from testing-optimizer/src/test/scala/scala/scalanative/FrameworkTest.scala
rename to tools/src/test/scala/scala/scalanative/FrameworkTest.scala
index e6aec26..0895d93 100644
--- a/testing-optimizer/src/test/scala/scala/scalanative/FrameworkTest.scala
+++ b/tools/src/test/scala/scala/scalanative/FrameworkTest.scala
@@ -1,12 +1,10 @@
 package scala.scalanative
-package testing
-package optimizer
 
 import tools._
 
 import org.scalatest._
 
-class FrameworkTest extends OptimizerSpec with Matchers {
+class FrameworkTest extends NativeSpec with Matchers {
 
   "The test framework" should "return the definitions for a single class" in {
     withDefinitions("""class A {
diff --git a/testing-optimizer/src/main/scala/scala/scalanative/Compiler.scala b/tools/src/test/scala/scala/scalanative/NIRCompiler.scala
similarity index 86%
rename from testing-optimizer/src/main/scala/scala/scalanative/Compiler.scala
rename to tools/src/test/scala/scala/scalanative/NIRCompiler.scala
index d3070d7..9125654 100644
--- a/testing-optimizer/src/main/scala/scala/scalanative/Compiler.scala
+++ b/tools/src/test/scala/scala/scalanative/NIRCompiler.scala
@@ -4,9 +4,7 @@ import java.nio.file.Files
 import java.io.{File, PrintWriter}
 import java.net.URLClassLoader
 
-import api.NIRCompiler
-
-object Compiler {
+object NIRCompiler {
 
   private val allow: String => Boolean =
     n =>
@@ -30,11 +28,11 @@ object Compiler {
     new URLClassLoader(parts.toArray, parent)
   }
 
-  def getCompiler(): NIRCompiler = {
+  def getCompiler(): api.NIRCompiler = {
     val clazz =
       classLoader.loadClass("scala.scalanative.NIRCompiler")
     clazz.newInstance match {
-      case compiler: NIRCompiler => compiler
+      case compiler: api.NIRCompiler => compiler
       case other =>
         throw new ReflectiveOperationException(
           "Expected an object of type `scala.scalanative.NIRCompiler`, " +
@@ -42,12 +40,12 @@ object Compiler {
     }
   }
 
-  def getCompiler(outDir: File): NIRCompiler = {
+  def getCompiler(outDir: File): api.NIRCompiler = {
     val clazz =
       classLoader.loadClass("scala.scalanative.NIRCompiler")
     val constructor = clazz.getConstructor(classOf[File])
     constructor.newInstance(outDir) match {
-      case compiler: NIRCompiler => compiler
+      case compiler: api.NIRCompiler => compiler
       case other =>
         throw new ReflectiveOperationException(
           "Expected an object of type `scala.scalanative.NIRCompiler`, but " +
@@ -55,22 +53,22 @@ object Compiler {
     }
   }
 
-  def apply[T](outDir: File)(fn: NIRCompiler => T): T =
+  def apply[T](outDir: File)(fn: api.NIRCompiler => T): T =
     withSources(outDir)(Map.empty) { case (_, compiler) => fn(compiler) }
 
-  def apply[T](fn: NIRCompiler => T): T =
+  def apply[T](fn: api.NIRCompiler => T): T =
     withSources(Map.empty[String, String]) {
       case (_, compiler) => fn(compiler)
     }
 
   def withSources[T](outDir: File)(sources: Map[String, String])(
-      fn: (File, NIRCompiler) => T): T = {
+      fn: (File, api.NIRCompiler) => T): T = {
     val sourcesDir = writeSources(sources)
     fn(sourcesDir, getCompiler(outDir))
   }
 
   def withSources[T](sources: Map[String, String])(
-      fn: (File, NIRCompiler) => T): T = {
+      fn: (File, api.NIRCompiler) => T): T = {
     val sourcesDir = writeSources(sources)
     fn(sourcesDir, getCompiler())
   }
diff --git a/testing-optimizer/src/test/scala/scala/scalanative/CompilerTest.scala b/tools/src/test/scala/scala/scalanative/NIRCompilerTest.scala
similarity index 77%
rename from testing-optimizer/src/test/scala/scala/scalanative/CompilerTest.scala
rename to tools/src/test/scala/scala/scalanative/NIRCompilerTest.scala
index cbf10b5..5b2c209 100644
--- a/testing-optimizer/src/test/scala/scala/scalanative/CompilerTest.scala
+++ b/tools/src/test/scala/scala/scalanative/NIRCompilerTest.scala
@@ -1,13 +1,11 @@
 package scala.scalanative
-package testing
-package compiler
 
 import org.scalatest._
 
-class CompilerTest extends FlatSpec with Matchers with Inspectors {
+class NIRCompilerTest extends FlatSpec with Matchers with Inspectors {
 
   "The compiler" should "be able to get NIR files" in {
-    val files = Compiler { _ getNIR "class A" }
+    val files = NIRCompiler { _ getNIR "class A" }
     files should have length 1
     files(0).getName should be("A.hnir")
   }
@@ -21,7 +19,7 @@ class CompilerTest extends FlatSpec with Matchers with Inspectors {
                      |object E""".stripMargin
     )
 
-    Compiler.withSources(sources) {
+    NIRCompiler.withSources(sources) {
       case (sourcesDir, compiler) =>
         val nirFiles = compiler.getNIR(sourcesDir) map (_.getName)
         val expectedNames =
@@ -32,14 +30,14 @@ class CompilerTest extends FlatSpec with Matchers with Inspectors {
 
   it should "report compilation errors" in {
     assertThrows[api.CompilationFailedException] {
-      Compiler { _ getNIR "invalid" }
+      NIRCompiler { _ getNIR "invalid" }
     }
   }
 
   it should "compile to a specified directory" in {
     val temporaryDir =
       java.nio.file.Files.createTempDirectory("my-target").toFile()
-    val nirFiles = Compiler(outDir = temporaryDir) { _ getNIR "class A" }
+    val nirFiles = NIRCompiler(outDir = temporaryDir) { _ getNIR "class A" }
     forAll(nirFiles) { _.getParentFile should be(temporaryDir) }
   }
 
diff --git a/testing-optimizer/src/test/scala/scala/scalanative/OptimizerSpec.scala b/tools/src/test/scala/scala/scalanative/NativeSpec.scala
similarity index 89%
rename from testing-optimizer/src/test/scala/scala/scalanative/OptimizerSpec.scala
rename to tools/src/test/scala/scala/scalanative/NativeSpec.scala
index bef3891..93378a2 100644
--- a/testing-optimizer/src/test/scala/scala/scalanative/OptimizerSpec.scala
+++ b/tools/src/test/scala/scala/scalanative/NativeSpec.scala
@@ -8,12 +8,12 @@ import fastparse.all.Parsed
 
 import org.scalatest.FlatSpec
 
-abstract class OptimizerSpec extends FlatSpec {
+abstract class NativeSpec extends FlatSpec {
   def withDefinitions[T](code: String)(fn: Seq[nir.Defn] => T): T =
     withDefinitions(Map("source.scala" -> code))(fn)
 
   def withDefinitions[T](sources: Map[String, String])(fn: Seq[nir.Defn] => T): T =
-    Compiler.withSources(sources) {
+    NIRCompiler.withSources(sources) {
       case (sourcesDir, compiler) =>
         val nirFiles = compiler.getNIR(sourcesDir)
         val definitions =
-- 
2.9.3 (Apple Git-75)

