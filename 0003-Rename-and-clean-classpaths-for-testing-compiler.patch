From 7142c2e23eca0290684f40dbfe8de7588ed59c12 Mon Sep 17 00:00:00 2001
From: Martin Duhem <martin.duhem@gmail.com>
Date: Thu, 3 Nov 2016 16:17:05 +0100
Subject: [PATCH 03/13] Rename and clean classpaths for testing compiler

There are now 3 environment variables that contain all the info the
testing compiler needs:

 - scalanative.testingcompiler.cp
   It contains everything the testing is going to need. That classpath
   is used to create a new classloader from which the testing compiler
   will be loaded.
 - scalanative.nscplugin.jar
   The absolute path to the packaged nscplugin.
 - scalanative.nativeruntime.cp
   Everything that the linker needs to have on classpath to do its job.
---
 .travis.yml                                        |  2 +-
 build.sbt                                          | 44 +++++++++----------
 .../api/CompilationFailedException.java            |  2 +-
 .../{testing/compiler => }/api/NIRCompiler.java    |  2 +-
 .../scalanative/testing/compiler/NIRCompiler.scala | 13 +++---
 .../{testing/compiler => }/Compiler.scala          | 51 ++++++++++++++--------
 .../{testing/utils => }/FilteredClassLoader.scala  |  5 +--
 .../{testing/compiler => }/CompilerTest.scala      | 11 ++---
 .../scala/scala/scalanative/FrameworkTest.scala    | 29 ++++++++++++
 .../scala/scala/scalanative/OptimizerSpec.scala    | 28 ++++++++++++
 10 files changed, 130 insertions(+), 57 deletions(-)
 rename testing-compiler-interface/src/main/java/scala/scalanative/{testing/compiler => }/api/CompilationFailedException.java (75%)
 rename testing-compiler-interface/src/main/java/scala/scalanative/{testing/compiler => }/api/NIRCompiler.java (73%)
 rename testing-optimizer/src/main/scala/scala/scalanative/{testing/compiler => }/Compiler.scala (56%)
 rename testing-optimizer/src/main/scala/scala/scalanative/{testing/utils => }/FilteredClassLoader.scala (86%)
 rename testing-optimizer/src/test/scala/scala/scalanative/{testing/compiler => }/CompilerTest.scala (77%)
 create mode 100644 testing-optimizer/src/test/scala/scala/scalanative/FrameworkTest.scala
 create mode 100644 testing-optimizer/src/test/scala/scala/scalanative/OptimizerSpec.scala

diff --git a/.travis.yml b/.travis.yml
index 55b22f5..93fb3db 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -54,4 +54,4 @@ script:
   - pushd sbt-cross
   - sbt publishLocal
   - popd
-  - bin/scalafmt --test && sbt 'cleanCache' 'cleanLocal' 'nscplugin/publishLocal' 'nativelib/publishLocal' 'publishLocal' 'sandbox/run' 'demoNative/run' 'tests/run' 'tools/test' 'testingCompiler/test' 'benchmarks/run' 'scripted' 'publishSnapshot'
+  - bin/scalafmt --test && sbt 'cleanCache' 'cleanLocal' 'nscplugin/publishLocal' 'nativelib/publishLocal' 'publishLocal' 'sandbox/run' 'demoNative/run' 'tests/run' 'tools/test' 'testingOptimizer/test' 'benchmarks/run' 'scripted' 'publishSnapshot'
diff --git a/build.sbt b/build.sbt
index ca088c2..ff2b0f9 100644
--- a/build.sbt
+++ b/build.sbt
@@ -1,6 +1,7 @@
 import scala.util.Try
 import scalanative.tools.OptimizerReporter
 import scalanative.sbtplugin.ScalaNativePluginInternal.nativeOptimizerReporter
+import java.io.File.pathSeparator
 
 val toolScalaVersion = "2.10.6"
 
@@ -15,6 +16,22 @@ lazy val baseSettings = Seq(
 lazy val publishSnapshot =
   taskKey[Unit]("Publish snapshot to sonatype on every commit to master.")
 
+lazy val setUpTestingCompiler = Def.task {
+  val nscpluginjar = (Keys.`package` in nscplugin in Compile).value
+  val nativelibjar = (Keys.`package` in nativelib in Compile).value
+  val scalalibjar  = (Keys.`package` in scalalib in Compile).value
+  val javalibjar   = (Keys.`package` in javalib in Compile).value
+  val testingcompilercp =
+    (fullClasspath in testingCompiler in Compile).value.files
+  val testingcompilerjar = (Keys.`package` in testingCompiler in Compile).value
+
+  sys.props("scalanative.nscplugin.jar") = nscpluginjar.getAbsolutePath
+  sys.props("scalanative.testingcompiler.cp") =
+    (testingcompilercp :+ testingcompilerjar) map (_.getAbsolutePath) mkString pathSeparator
+  sys.props("scalanative.nativeruntime.cp") =
+    Seq(nativelibjar, scalalibjar, javalibjar) mkString pathSeparator
+}
+
 lazy val publishSettings = Seq(
   publishArtifact in Compile := true,
   publishArtifact in Test := false,
@@ -371,17 +388,10 @@ lazy val testingOptimizer =
     .in(file("testing-optimizer"))
     .settings(toolSettings)
     .settings(
-      fullClasspath in Test := {
-        val testingcompilercp = (fullClasspath in testingCompiler in Compile).value.files.map(_.getAbsolutePath)
-        val testingcompilerjar = (Keys.`package` in testingCompiler in Compile).value.getAbsolutePath
-        sys.props("sbt.paths.testingcompiler.cp") = (testingcompilercp :+ testingcompilerjar) mkString java.io.File.pathSeparator
-        (fullClasspath in Test).value
-      }
-    )
-    .settings(
-        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.0" % Test
+      fullClasspath in Test := ((fullClasspath in Test) dependsOn setUpTestingCompiler).value,
+      libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.0" % Test
     )
-    .dependsOn(testingCompilerInterface)
+    .dependsOn(testingCompilerInterface, tools)
 
 lazy val testingCompilerInterface =
   project
@@ -401,17 +411,7 @@ lazy val testingCompiler =
     .settings(
       libraryDependencies ++= Seq(
         "org.scala-lang" % "scala-compiler" % scalaVersion.value,
-        "org.scala-lang" % "scala-reflect"  % scalaVersion.value,
-        "org.scalatest" %% "scalatest" % "3.0.0" % Test
+        "org.scala-lang" % "scala-reflect"  % scalaVersion.value
       )
-    ).dependsOn(testingCompilerInterface, nativelib)
-    .settings(
-      fullClasspath in Test := {
-        val testcp = (fullClasspath in Test).value.files.map(_.getAbsolutePath).mkString(java.io.File.pathSeparator)
-        sys.props("sbt.class.directory") = testcp
-
-        val nscpluginjar = (Keys.`package` in nscplugin in Compile).value
-        sys.props("sbt.paths.scalanative.jar") = nscpluginjar.getAbsolutePath
-        (fullClasspath in Test).value
-      }
     )
+    .dependsOn(testingCompilerInterface, nativelib)
diff --git a/testing-compiler-interface/src/main/java/scala/scalanative/testing/compiler/api/CompilationFailedException.java b/testing-compiler-interface/src/main/java/scala/scalanative/api/CompilationFailedException.java
similarity index 75%
rename from testing-compiler-interface/src/main/java/scala/scalanative/testing/compiler/api/CompilationFailedException.java
rename to testing-compiler-interface/src/main/java/scala/scalanative/api/CompilationFailedException.java
index 23fe179..d229e95 100644
--- a/testing-compiler-interface/src/main/java/scala/scalanative/testing/compiler/api/CompilationFailedException.java
+++ b/testing-compiler-interface/src/main/java/scala/scalanative/api/CompilationFailedException.java
@@ -1,4 +1,4 @@
-package scala.scalanative.testing.compiler.api;
+package scala.scalanative.api;
 
 public class CompilationFailedException extends Exception {
     public CompilationFailedException(String message) {
diff --git a/testing-compiler-interface/src/main/java/scala/scalanative/testing/compiler/api/NIRCompiler.java b/testing-compiler-interface/src/main/java/scala/scalanative/api/NIRCompiler.java
similarity index 73%
rename from testing-compiler-interface/src/main/java/scala/scalanative/testing/compiler/api/NIRCompiler.java
rename to testing-compiler-interface/src/main/java/scala/scalanative/api/NIRCompiler.java
index 7e64e01..2e2b531 100644
--- a/testing-compiler-interface/src/main/java/scala/scalanative/testing/compiler/api/NIRCompiler.java
+++ b/testing-compiler-interface/src/main/java/scala/scalanative/api/NIRCompiler.java
@@ -1,4 +1,4 @@
-package scala.scalanative.testing.compiler.api;
+package scala.scalanative.api;
 
 import java.io.File;
 
diff --git a/testing-compiler/src/main/scala/scalanative/testing/compiler/NIRCompiler.scala b/testing-compiler/src/main/scala/scalanative/testing/compiler/NIRCompiler.scala
index 0f7306e..e84484f 100644
--- a/testing-compiler/src/main/scala/scalanative/testing/compiler/NIRCompiler.scala
+++ b/testing-compiler/src/main/scala/scalanative/testing/compiler/NIRCompiler.scala
@@ -1,5 +1,4 @@
-package scala.scalanative.testing
-package compiler
+package scala.scalanative
 
 import scala.reflect.internal.util.{BatchSourceFile, NoFile, SourceFile}
 import scala.reflect.internal.util.Position
@@ -59,8 +58,8 @@ class NIRCompiler(outputDir: File) extends api.NIRCompiler {
         _,
         filter)))
 
-
-  private def reportError(error: String) = throw new api.CompilationFailedException(error)
+  private def reportError(error: String) =
+    throw new api.CompilationFailedException(error)
 
   /**
    * Reporter that ignores INFOs and WARNINGs, but directly aborts the compilation
@@ -100,10 +99,10 @@ class NIRCompiler(outputDir: File) extends api.NIRCompiler {
    * Option to add the scala-native compiler plugin
    */
   private case object ScalaNative
-      extends CompilerPlugin(jarPath = sys props "sbt.paths.scalanative.jar",
+      extends CompilerPlugin(jarPath = sys props "scalanative.nscplugin.jar",
                              classpath =
-                               List(sys props "sbt.class.directory",
-                                    sys props "sbt.paths.scalanative.jar"))
+                               List(sys props "scalanative.testingcompiler.cp",
+                                    sys props "scalanative.nscplugin.jar"))
 
   /**
    * Returns an instance of `Global` configured according to the given options.
diff --git a/testing-optimizer/src/main/scala/scala/scalanative/testing/compiler/Compiler.scala b/testing-optimizer/src/main/scala/scala/scalanative/Compiler.scala
similarity index 56%
rename from testing-optimizer/src/main/scala/scala/scalanative/testing/compiler/Compiler.scala
rename to testing-optimizer/src/main/scala/scala/scalanative/Compiler.scala
index 733bfe1..d3070d7 100644
--- a/testing-optimizer/src/main/scala/scala/scalanative/testing/compiler/Compiler.scala
+++ b/testing-optimizer/src/main/scala/scala/scalanative/Compiler.scala
@@ -1,45 +1,57 @@
 package scala.scalanative
-package testing
-package compiler
 
 import java.nio.file.Files
-import java.io.{ File, PrintWriter }
+import java.io.{File, PrintWriter}
 import java.net.URLClassLoader
 
-import utils.FilteredClassLoader
-import compiler.api.NIRCompiler
+import api.NIRCompiler
 
 object Compiler {
 
   private val allow: String => Boolean =
-    n => n.startsWith("scala.scalanative.testing.compiler.api.") || !n.startsWith("scala.")
+    n =>
+      n.startsWith("scala.scalanative.api.") || !n.startsWith(
+        "scala.")
 
   private val classLoader = {
-    val parts = sys.props("sbt.paths.testingcompiler.cp").split(":").map(new java.io.File(_)).filter(f=> f.exists && f.getName.endsWith(".jar")).map(_.toURI.toURL)
+    val parts = sys
+      .props("scalanative.testingcompiler.cp")
+      .split(":")
+      .map(new java.io.File(_))
+      .filter(f => f.exists && f.getName.endsWith(".jar"))
+      .map(_.toURI.toURL)
 
     // We must share some parts of our classpath with the classloader used for the NIR compiler,
     // because we want to be able to cast the NIRCompiler that we get back to its interface and
     // be able to use it seamlessly.
     // We filter out the scala library from out classloader (so that it gets delegated to the
-    // scala library that is in `sbt.paths.testingcompiler.cp`, and we keep `api.NIRCompiler`.
+    // scala library that is in `scalanative.testingcompiler.cp`, and we keep `api.NIRCompiler`.
     val parent = new FilteredClassLoader(allow, this.getClass.getClassLoader)
     new URLClassLoader(parts.toArray, parent)
   }
 
   def getCompiler(): NIRCompiler = {
-    val clazz = classLoader.loadClass("scala.scalanative.testing.compiler.NIRCompiler")
+    val clazz =
+      classLoader.loadClass("scala.scalanative.NIRCompiler")
     clazz.newInstance match {
       case compiler: NIRCompiler => compiler
-      case other                 => throw new ReflectiveOperationException(s"Expected an object of type `scala.scalanative.testing.compiler.NIRCompiler`, but found `${other.getClass.getName}`.")
+      case other =>
+        throw new ReflectiveOperationException(
+          "Expected an object of type `scala.scalanative.NIRCompiler`, " +
+            s"but found `${other.getClass.getName}`.")
     }
   }
 
   def getCompiler(outDir: File): NIRCompiler = {
-    val clazz = classLoader.loadClass("scala.scalanative.testing.compiler.NIRCompiler")
+    val clazz =
+      classLoader.loadClass("scala.scalanative.NIRCompiler")
     val constructor = clazz.getConstructor(classOf[File])
     constructor.newInstance(outDir) match {
       case compiler: NIRCompiler => compiler
-      case other                 => throw new ReflectiveOperationException(s"Expected an object of type `scala.scalanative.testing.compiler.NIRCompiler`, but found `${other.getClass.getName}`.")
+      case other =>
+        throw new ReflectiveOperationException(
+          "Expected an object of type `scala.scalanative.NIRCompiler`, but " +
+            s"found `${other.getClass.getName}`.")
     }
   }
 
@@ -47,21 +59,27 @@ object Compiler {
     withSources(outDir)(Map.empty) { case (_, compiler) => fn(compiler) }
 
   def apply[T](fn: NIRCompiler => T): T =
-    withSources(Map.empty[String, String]) { case (_, compiler) => fn(compiler) }
+    withSources(Map.empty[String, String]) {
+      case (_, compiler) => fn(compiler)
+    }
 
-  def withSources[T](outDir: File)(sources: Map[String, String])(fn: (File, NIRCompiler) => T): T = {
+  def withSources[T](outDir: File)(sources: Map[String, String])(
+      fn: (File, NIRCompiler) => T): T = {
     val sourcesDir = writeSources(sources)
     fn(sourcesDir, getCompiler(outDir))
   }
 
-  def withSources[T](sources: Map[String, String])(fn: (File, NIRCompiler) => T): T = {
+  def withSources[T](sources: Map[String, String])(
+      fn: (File, NIRCompiler) => T): T = {
     val sourcesDir = writeSources(sources)
     fn(sourcesDir, getCompiler())
   }
 
   private def writeSources(sources: Map[String, String]): File = {
     val baseDir = Files.createTempDirectory("scala-native-sources").toFile()
-    sources foreach { case (name, content) => makeFile(baseDir, name, content) }
+    sources foreach {
+      case (name, content) => makeFile(baseDir, name, content)
+    }
     baseDir
   }
 
@@ -72,4 +90,3 @@ object Compiler {
   }
 
 }
-
diff --git a/testing-optimizer/src/main/scala/scala/scalanative/testing/utils/FilteredClassLoader.scala b/testing-optimizer/src/main/scala/scala/scalanative/FilteredClassLoader.scala
similarity index 86%
rename from testing-optimizer/src/main/scala/scala/scalanative/testing/utils/FilteredClassLoader.scala
rename to testing-optimizer/src/main/scala/scala/scalanative/FilteredClassLoader.scala
index 75bc6ac..6c0568c 100644
--- a/testing-optimizer/src/main/scala/scala/scalanative/testing/utils/FilteredClassLoader.scala
+++ b/testing-optimizer/src/main/scala/scala/scalanative/FilteredClassLoader.scala
@@ -1,12 +1,11 @@
 package scala.scalanative
-package testing
-package utils
 
 /**
  * A `ClassLoader` that will let `parent` load classes that satisfy `allow`, and
  * throw a `ClassNotFoundException` for all other classes.
  */
-class FilteredClassLoader(allow: String => Boolean, parent: ClassLoader) extends ClassLoader(parent) {
+class FilteredClassLoader(allow: String => Boolean, parent: ClassLoader)
+    extends ClassLoader(parent) {
 
   override def loadClass(className: String, resolve: Boolean): Class[_] =
     if (allow(className))
diff --git a/testing-optimizer/src/test/scala/scala/scalanative/testing/compiler/CompilerTest.scala b/testing-optimizer/src/test/scala/scala/scalanative/CompilerTest.scala
similarity index 77%
rename from testing-optimizer/src/test/scala/scala/scalanative/testing/compiler/CompilerTest.scala
rename to testing-optimizer/src/test/scala/scala/scalanative/CompilerTest.scala
index 7b7632f..cbf10b5 100644
--- a/testing-optimizer/src/test/scala/scala/scalanative/testing/compiler/CompilerTest.scala
+++ b/testing-optimizer/src/test/scala/scala/scalanative/CompilerTest.scala
@@ -6,10 +6,10 @@ import org.scalatest._
 
 class CompilerTest extends FlatSpec with Matchers with Inspectors {
 
-  "The compiler" should "be able to get NIR files"in {
+  "The compiler" should "be able to get NIR files" in {
     val files = Compiler { _ getNIR "class A" }
     files should have length 1
-    files(0).getName should be ("A.hnir")
+    files(0).getName should be("A.hnir")
   }
 
   it should "compile whole directories" in {
@@ -36,10 +36,11 @@ class CompilerTest extends FlatSpec with Matchers with Inspectors {
     }
   }
 
-  it should "compile to a specified directory"in {
-    val temporaryDir = java.nio.file.Files.createTempDirectory("my-target").toFile()
+  it should "compile to a specified directory" in {
+    val temporaryDir =
+      java.nio.file.Files.createTempDirectory("my-target").toFile()
     val nirFiles = Compiler(outDir = temporaryDir) { _ getNIR "class A" }
-    forAll (nirFiles) { _.getParentFile should be(temporaryDir) }
+    forAll(nirFiles) { _.getParentFile should be(temporaryDir) }
   }
 
 }
diff --git a/testing-optimizer/src/test/scala/scala/scalanative/FrameworkTest.scala b/testing-optimizer/src/test/scala/scala/scalanative/FrameworkTest.scala
new file mode 100644
index 0000000..e6aec26
--- /dev/null
+++ b/testing-optimizer/src/test/scala/scala/scalanative/FrameworkTest.scala
@@ -0,0 +1,29 @@
+package scala.scalanative
+package testing
+package optimizer
+
+import tools._
+
+import org.scalatest._
+
+class FrameworkTest extends OptimizerSpec with Matchers {
+
+  "The test framework" should "return the definitions for a single class" in {
+    withDefinitions("""class A {
+                      |  def foo(name: String): Unit =
+                      |    println(s"Hello, $name!")
+                      |}""".stripMargin) {
+      defns =>
+        defns should have length(3)
+    }
+  }
+
+  it should "return the definitions for classes in multiple files" in {
+    val sources = Map("A.scala" -> "class A",
+                      "B.scala" -> "class B extends A")
+
+    withDefinitions(sources) { defns =>
+      defns should have length(4)
+    }
+  }
+}
diff --git a/testing-optimizer/src/test/scala/scala/scalanative/OptimizerSpec.scala b/testing-optimizer/src/test/scala/scala/scalanative/OptimizerSpec.scala
new file mode 100644
index 0000000..bef3891
--- /dev/null
+++ b/testing-optimizer/src/test/scala/scala/scalanative/OptimizerSpec.scala
@@ -0,0 +1,28 @@
+package scala.scalanative
+
+import nir.parser.NirParser
+
+import scala.io.Source
+
+import fastparse.all.Parsed
+
+import org.scalatest.FlatSpec
+
+abstract class OptimizerSpec extends FlatSpec {
+  def withDefinitions[T](code: String)(fn: Seq[nir.Defn] => T): T =
+    withDefinitions(Map("source.scala" -> code))(fn)
+
+  def withDefinitions[T](sources: Map[String, String])(fn: Seq[nir.Defn] => T): T =
+    Compiler.withSources(sources) {
+      case (sourcesDir, compiler) =>
+        val nirFiles = compiler.getNIR(sourcesDir)
+        val definitions =
+          for { file                     <- nirFiles
+                hnir                     =  Source.fromFile(file)
+                Parsed.Success(defns, _) =  NirParser(hnir.mkString)
+                defn                     <- defns } yield defn
+
+        fn(definitions)
+    }
+
+}
-- 
2.9.3 (Apple Git-75)

