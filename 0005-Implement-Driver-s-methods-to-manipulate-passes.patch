From 57c593b6c95096799ef402fdd15a97481df8062d Mon Sep 17 00:00:00 2001
From: Martin Duhem <martin.duhem@gmail.com>
Date: Wed, 30 Nov 2016 08:34:47 +0100
Subject: [PATCH 05/13] Implement `Driver`'s methods to manipulate passes

---
 .../scala/scala/scalanative/optimizer/Driver.scala |  9 +++--
 .../scala/scalanative/optimizer/DriverSpec.scala   | 47 ++++++++++++++++++++++
 2 files changed, 53 insertions(+), 3 deletions(-)
 create mode 100644 tools/src/test/scala/scala/scalanative/optimizer/DriverSpec.scala

diff --git a/tools/src/main/scala/scala/scalanative/optimizer/Driver.scala b/tools/src/main/scala/scala/scalanative/optimizer/Driver.scala
index accedc7..63e71b6 100644
--- a/tools/src/main/scala/scala/scalanative/optimizer/Driver.scala
+++ b/tools/src/main/scala/scala/scalanative/optimizer/Driver.scala
@@ -49,10 +49,13 @@ object Driver {
     new Impl(Seq.empty)
 
   private final class Impl(val passes: Seq[PassCompanion]) extends Driver {
-    def takeUpTo(pass: PassCompanion): Driver = ???
+    def takeUpTo(pass: PassCompanion): Driver =
+      takeBefore(pass).append(pass)
 
-    def takeBefore(pass: PassCompanion): Driver = ???
+    def takeBefore(pass: PassCompanion): Driver =
+      new Impl(passes takeWhile (_ != pass))
 
-    def append(pass: PassCompanion): Driver = ???
+    def append(pass: PassCompanion): Driver =
+      new Impl(passes :+ pass)
   }
 }
diff --git a/tools/src/test/scala/scala/scalanative/optimizer/DriverSpec.scala b/tools/src/test/scala/scala/scalanative/optimizer/DriverSpec.scala
new file mode 100644
index 0000000..62a7f37
--- /dev/null
+++ b/tools/src/test/scala/scala/scalanative/optimizer/DriverSpec.scala
@@ -0,0 +1,47 @@
+package scala.scalanative
+package optimizer
+
+import tools.Config
+import analysis.ClassHierarchy.Top
+
+import org.scalatest._
+
+class DriverSpec extends FlatSpec with Matchers {
+
+  private def makeCompanion: PassCompanion =
+    new PassCompanion {
+      override def apply(config: Config, top: Top): Pass =
+        pass.EmptyPass
+    }
+
+  private val P0 = makeCompanion
+  private val P1 = makeCompanion
+  private val P2 = makeCompanion
+
+  "The driver" should "support `append`" in {
+    val driver = Driver.empty.append(P0)
+    driver.passes should have length (1)
+    driver.passes(0) should be(P0)
+  }
+
+  it should "support `takeUpTo`" in {
+    val driver = Driver.empty.append(P0).append(P1).append(P2)
+    driver.passes should have length (3)
+    driver.passes should contain theSameElementsInOrderAs Seq(P0, P1, P2)
+
+    val newDriver = driver.takeUpTo(P1)
+    newDriver.passes should have length (2)
+    newDriver.passes should contain theSameElementsInOrderAs Seq(P0, P1)
+  }
+
+  it should "support `takeBefore`" in {
+    val driver = Driver.empty.append(P0).append(P1).append(P2)
+    driver.passes should have length (3)
+    driver.passes should contain theSameElementsInOrderAs Seq(P0, P1, P2)
+
+    val newDriver = driver.takeBefore(P2)
+    newDriver.passes should have length (2)
+    newDriver.passes should contain theSameElementsInOrderAs Seq(P0, P1)
+  }
+
+}
-- 
2.9.3 (Apple Git-75)

